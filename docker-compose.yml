services:
  configuration-service:
    container_name: configuration-service
    image: ecommerce/configuration-service
    build:
      context: cloud/configuration-service
      dockerfile: Dockerfile
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - ./config-repo:/config-repo
    networks:
      - ecommerce

  gateway-service:
    container_name: gateway-service
    image: ecommerce/gateway-service
    build:
      context: cloud/gateway-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - configuration-service
    networks:
      - ecommerce

  integration-service:
    container_name: integration-service
    image: ecommerce/integration-service
    build:
      context: services/integration-service
      dockerfile: Dockerfile
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - configuration-service
    networks:
      - ecommerce

  checkout-service:
    container_name: checkout-service
    image: ecommerce/checkout-service
    build:
      context: services/checkout-service
      dockerfile: Dockerfile
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - configuration-service
    networks:
      - ecommerce

  inventory-service:
    container_name: inventory-service
    image: ecommerce/inventory-service
    build:
      context: services/purchase/inventory-service
      dockerfile: Dockerfile
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - configuration-service
      - postgres
    networks:
      - ecommerce

  product-service:
    container_name: product-service
    image: ecommerce/product-service
    build:
      context: services/purchase/product-service
      dockerfile: Dockerfile
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - configuration-service
      - postgres
    networks:
      - ecommerce

  order-service:
    container_name: order-service
    image: ecommerce/order-service
    build:
      context: services/purchase/order-service
      dockerfile: Dockerfile
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - configuration-service
    networks:
      - ecommerce

  shipping-service:
    container_name: shipping-service
    image: ecommerce/shipping-service
    build:
      context: services/cart/shipping-service
      dockerfile: Dockerfile
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - configuration-service
    networks:
      - ecommerce

  postgres:
    container_name: postgres
    image: ecommerce/postgres
    build:
      context: images/postgres
      dockerfile: Dockerfile
    volumes:
      - postgres:/data/postgres
    networks:
      - ecommerce
    restart: unless-stopped
  adminer:
    image: adminer
    restart: always
    ports:
      - "8082:8080"
    networks:
      - ecommerce

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.11.8-management
    mem_limit: 512m
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 2s
      retries: 60
    networks:
      - ecommerce

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.1.4
    command:
      - start-dev
      - --import-realm
    ports:
      - "9092:9092"
    volumes:
      - ./keycloak/:/opt/keycloak/data/import/
    environment:
      KC_HTTP_PORT: 9092
      KC_HOSTNAME_URL: http://localhost:9092
      KC_HOSTNAME_ADMIN_URL: http://localhost:9092
      KC_HOSTNAME_STRICT_BACKCHANNEL: true
      KC_HTTP_RELATIVE_PATH: /
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - ecommerce

networks:
  ecommerce:
    driver: bridge
volumes:
  postgres:
    driver: local